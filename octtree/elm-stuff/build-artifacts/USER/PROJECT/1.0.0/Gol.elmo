Elm.Gol = Elm.Gol || {};
Elm.Gol.make = function (_elm) {
   "use strict";
   _elm.Gol = _elm.Gol || {};
   if (_elm.Gol.values)
   return _elm.Gol.values;
   var _op = {},
   _N = Elm.Native,
   _U = _N.Utils.make(_elm),
   _L = _N.List.make(_elm),
   _P = _N.Ports.make(_elm),
   $moduleName = "Gol",
   $Basics = Elm.Basics.make(_elm),
   $Dict = Elm.Dict.make(_elm),
   $Engine = Elm.Engine.make(_elm),
   $Graphics$Element = Elm.Graphics.Element.make(_elm),
   $Keyboard = Elm.Keyboard.make(_elm),
   $List = Elm.List.make(_elm),
   $Math$Matrix4 = Elm.Math.Matrix4.make(_elm),
   $Math$Vector3 = Elm.Math.Vector3.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Mouse = Elm.Mouse.make(_elm),
   $Signal = Elm.Signal.make(_elm),
   $Text = Elm.Text.make(_elm),
   $Time = Elm.Time.make(_elm);
   var fragmentShader = "\nprecision mediump float;\nuniform sampler2D texture;\nvarying vec2 vcoord;\n\nvoid main () {\n  gl_FragColor = texture2D(texture, vcoord);\n}\n";
   var vertexShader = "\nattribute vec3 position;\nattribute vec3 coord;\nuniform mat4 perspective;\nvarying vec2 vcoord;\n\nvoid main () {\n  gl_Position = perspective * vec4(position, 1.0);\n  vcoord = coord.xy;\n}\n";
   var cam2 = A3($Math$Matrix4.makeLookAt,
   A3($Math$Vector3.vec3,0,0,5),
   A3($Math$Vector3.vec3,0,0,0),
   A3($Math$Vector3.vec3,0,1,0));
   var perspectiveMatrix = A4($Math$Matrix4.makePerspective,
   45,
   1,
   1.0e-2,
   100);
   var perspective = function (angle) {
      return A2($List.foldr1,
      $Math$Matrix4.mul,
      _L.fromArray([perspectiveMatrix
                   ,cam2
                   ,A2($Math$Matrix4.makeRotate,
                   3 * angle,
                   A3($Math$Vector3.vec3,
                   0,
                   1,
                   0))]));
   };
   var title = $Text.plainText("The Game of Life in 3D\n");
   var filters = function (cells) {
      return function () {
         switch (cells.ctor)
         {case "::":
            switch (cells._0.ctor)
              {case "_Tuple2":
                 return cells._0._1 ? A2($Basics._op["++"],
                   _L.fromArray([cells._0._0]),
                   filters(cells._1)) : filters(cells._1);}
              break;
            case "[]":
            return _L.fromArray([]);}
         _U.badCase($moduleName,
         "between lines 217 and 220");
      }();
   };
   var boardToList = function (b) {
      return filters($Dict.toList(b));
   };
   var cam = _U.replace([["position"
                         ,A3($Math$Vector3.vec3,0,0,-5)]
                        ,["rotation"
                         ,A3($Math$Vector3.vec3,
                         0,
                         $Basics.pi / 8,
                         0)]],
   $Engine.camera);
   var vp = {_: {}
            ,dimensions: {_: {}
                         ,height: 750.0
                         ,width: 750.0}};
   var myCube = F3(function (cx,
   cy,
   cz) {
      return _U.replace([["rotation"
                         ,A3($Math$Vector3.vec3,0,0,0)]
                        ,["mesh"
                         ,A2($Engine.cubeMesh,
                         A3($Math$Vector3.vec3,cx,cy,cz),
                         1)]],
      $Engine.cube);
   });
   var listCubes = function (xs) {
      return function () {
         switch (xs.ctor)
         {case "::": switch (xs._0.ctor)
              {case "_Tuple3":
                 return A2($Basics._op["++"],
                   _L.fromArray([A3(myCube,
                   $Basics.toFloat(xs._0._0),
                   $Basics.toFloat(xs._0._1),
                   $Basics.toFloat(xs._0._2))]),
                   listCubes(xs._1));}
              break;
            case "[]":
            return _L.fromArray([]);}
         _U.badCase($moduleName,
         "between lines 204 and 208");
      }();
   };
   var myScene = function (ds) {
      return _U.replace([["camera"
                         ,cam]
                        ,["objects",listCubes(ds)]
                        ,["viewport",vp]],
      $Engine.scene);
   };
   var displayBoard = function (b) {
      return myScene(boardToList(b));
   };
   var mat = _U.replace([["vertexShader"
                         ,vertexShader]
                        ,["fragmentShader"
                         ,fragmentShader]],
   $Engine.material);
   var Input = F2(function (a,b) {
      return {_: {}
             ,delta: b
             ,mouse: a};
   });
   var findWithDefault = F3(function (bool,
   cell,
   board) {
      return function () {
         var ans = A2($Dict.get,
         cell,
         board);
         return function () {
            switch (ans.ctor)
            {case "Just": return ans._0;
               case "Nothing": return bool;}
            _U.badCase($moduleName,
            "between lines 149 and 151");
         }();
      }();
   });
   var flipCell = F2(function (cell,
   board) {
      return A3($Dict.insert,
      cell,
      $Basics.not(A3(findWithDefault,
      false,
      cell,
      board)),
      board);
   });
   var newState = F2(function (state,
   n) {
      return state ? _U.cmp(n,
      1) < 0 ? false : _U.eq(n,
      4) || _U.eq(n,
      5) ? true : _U.cmp(n,
      8) > 0 ? false : state : _U.eq(n,
      5) ? true : false;
   });
   var neighborDiffs = _L.fromArray([{ctor: "_Tuple3"
                                     ,_0: 1
                                     ,_1: 0
                                     ,_2: 0}
                                    ,{ctor: "_Tuple3"
                                     ,_0: 1
                                     ,_1: 1
                                     ,_2: 0}
                                    ,{ctor: "_Tuple3"
                                     ,_0: 1
                                     ,_1: 0
                                     ,_2: 1}
                                    ,{ctor: "_Tuple3"
                                     ,_0: 1
                                     ,_1: 1
                                     ,_2: 1}
                                    ,{ctor: "_Tuple3"
                                     ,_0: 1
                                     ,_1: -1
                                     ,_2: 0}
                                    ,{ctor: "_Tuple3"
                                     ,_0: 1
                                     ,_1: 0
                                     ,_2: -1}
                                    ,{ctor: "_Tuple3"
                                     ,_0: 1
                                     ,_1: -1
                                     ,_2: -1}
                                    ,{ctor: "_Tuple3"
                                     ,_0: 1
                                     ,_1: -1
                                     ,_2: 1}
                                    ,{ctor: "_Tuple3"
                                     ,_0: 1
                                     ,_1: 1
                                     ,_2: -1}
                                    ,{ctor: "_Tuple3"
                                     ,_0: 0
                                     ,_1: 1
                                     ,_2: 0}
                                    ,{ctor: "_Tuple3"
                                     ,_0: 0
                                     ,_1: 0
                                     ,_2: 1}
                                    ,{ctor: "_Tuple3"
                                     ,_0: 0
                                     ,_1: 1
                                     ,_2: 1}
                                    ,{ctor: "_Tuple3"
                                     ,_0: 0
                                     ,_1: -1
                                     ,_2: 0}
                                    ,{ctor: "_Tuple3"
                                     ,_0: 0
                                     ,_1: 0
                                     ,_2: -1}
                                    ,{ctor: "_Tuple3"
                                     ,_0: 0
                                     ,_1: -1
                                     ,_2: -1}
                                    ,{ctor: "_Tuple3"
                                     ,_0: 0
                                     ,_1: -1
                                     ,_2: 1}
                                    ,{ctor: "_Tuple3"
                                     ,_0: 0
                                     ,_1: 1
                                     ,_2: -1}
                                    ,{ctor: "_Tuple3"
                                     ,_0: -1
                                     ,_1: 0
                                     ,_2: 0}
                                    ,{ctor: "_Tuple3"
                                     ,_0: -1
                                     ,_1: -1
                                     ,_2: 0}
                                    ,{ctor: "_Tuple3"
                                     ,_0: -1
                                     ,_1: 0
                                     ,_2: -1}
                                    ,{ctor: "_Tuple3"
                                     ,_0: -1
                                     ,_1: 1
                                     ,_2: 0}
                                    ,{ctor: "_Tuple3"
                                     ,_0: -1
                                     ,_1: 1
                                     ,_2: -1}
                                    ,{ctor: "_Tuple3"
                                     ,_0: -1
                                     ,_1: 1
                                     ,_2: 1}
                                    ,{ctor: "_Tuple3"
                                     ,_0: -1
                                     ,_1: -1
                                     ,_2: 0}
                                    ,{ctor: "_Tuple3"
                                     ,_0: -1
                                     ,_1: -1
                                     ,_2: -1}
                                    ,{ctor: "_Tuple3"
                                     ,_0: -1
                                     ,_1: 0
                                     ,_2: 1}]);
   var countNeighbors = F4(function (board,
   cx,
   cy,
   cz) {
      return function () {
         var neighbors = A2($List.map,
         function (_v13) {
            return function () {
               switch (_v13.ctor)
               {case "_Tuple3":
                  return A3(findWithDefault,
                    false,
                    {ctor: "_Tuple3"
                    ,_0: cx + _v13._0
                    ,_1: cy + _v13._1
                    ,_2: cz + _v13._2},
                    board);}
               _U.badCase($moduleName,
               "on line 155, column 41 to 96");
            }();
         },
         neighborDiffs);
         return $List.sum(A2($List.map,
         function (state) {
            return state ? 1 : 0;
         },
         neighbors));
      }();
   });
   var defaultBoard = $Dict.fromList(_L.fromArray([{ctor: "_Tuple2"
                                                   ,_0: {ctor: "_Tuple3"
                                                        ,_0: 0
                                                        ,_1: 0
                                                        ,_2: 0}
                                                   ,_1: false}
                                                  ,{ctor: "_Tuple2"
                                                   ,_0: {ctor: "_Tuple3"
                                                        ,_0: 0
                                                        ,_1: 0
                                                        ,_2: 1}
                                                   ,_1: false}
                                                  ,{ctor: "_Tuple2"
                                                   ,_0: {ctor: "_Tuple3"
                                                        ,_0: 0
                                                        ,_1: 0
                                                        ,_2: 2}
                                                   ,_1: true}
                                                  ,{ctor: "_Tuple2"
                                                   ,_0: {ctor: "_Tuple3"
                                                        ,_0: 0
                                                        ,_1: 1
                                                        ,_2: 0}
                                                   ,_1: true}
                                                  ,{ctor: "_Tuple2"
                                                   ,_0: {ctor: "_Tuple3"
                                                        ,_0: 0
                                                        ,_1: 1
                                                        ,_2: 1}
                                                   ,_1: true}
                                                  ,{ctor: "_Tuple2"
                                                   ,_0: {ctor: "_Tuple3"
                                                        ,_0: 0
                                                        ,_1: 1
                                                        ,_2: 2}
                                                   ,_1: false}
                                                  ,{ctor: "_Tuple2"
                                                   ,_0: {ctor: "_Tuple3"
                                                        ,_0: 0
                                                        ,_1: 2
                                                        ,_2: 0}
                                                   ,_1: false}
                                                  ,{ctor: "_Tuple2"
                                                   ,_0: {ctor: "_Tuple3"
                                                        ,_0: 0
                                                        ,_1: 2
                                                        ,_2: 1}
                                                   ,_1: true}
                                                  ,{ctor: "_Tuple2"
                                                   ,_0: {ctor: "_Tuple3"
                                                        ,_0: 0
                                                        ,_1: 2
                                                        ,_2: 2}
                                                   ,_1: false}
                                                  ,{ctor: "_Tuple2"
                                                   ,_0: {ctor: "_Tuple3"
                                                        ,_0: 1
                                                        ,_1: 0
                                                        ,_2: 0}
                                                   ,_1: false}
                                                  ,{ctor: "_Tuple2"
                                                   ,_0: {ctor: "_Tuple3"
                                                        ,_0: 1
                                                        ,_1: 1
                                                        ,_2: 0}
                                                   ,_1: false}
                                                  ,{ctor: "_Tuple2"
                                                   ,_0: {ctor: "_Tuple3"
                                                        ,_0: 1
                                                        ,_1: 1
                                                        ,_2: 1}
                                                   ,_1: true}
                                                  ,{ctor: "_Tuple2"
                                                   ,_0: {ctor: "_Tuple3"
                                                        ,_0: 1
                                                        ,_1: 0
                                                        ,_2: 1}
                                                   ,_1: true}
                                                  ,{ctor: "_Tuple2"
                                                   ,_0: {ctor: "_Tuple3"
                                                        ,_0: 1
                                                        ,_1: 2
                                                        ,_2: 0}
                                                   ,_1: false}
                                                  ,{ctor: "_Tuple2"
                                                   ,_0: {ctor: "_Tuple3"
                                                        ,_0: 1
                                                        ,_1: 2
                                                        ,_2: 1}
                                                   ,_1: true}
                                                  ,{ctor: "_Tuple2"
                                                   ,_0: {ctor: "_Tuple3"
                                                        ,_0: 1
                                                        ,_1: 2
                                                        ,_2: 2}
                                                   ,_1: false}
                                                  ,{ctor: "_Tuple2"
                                                   ,_0: {ctor: "_Tuple3"
                                                        ,_0: 1
                                                        ,_1: 0
                                                        ,_2: 2}
                                                   ,_1: false}
                                                  ,{ctor: "_Tuple2"
                                                   ,_0: {ctor: "_Tuple3"
                                                        ,_0: 2
                                                        ,_1: 0
                                                        ,_2: 1}
                                                   ,_1: false}
                                                  ,{ctor: "_Tuple2"
                                                   ,_0: {ctor: "_Tuple3"
                                                        ,_0: 2
                                                        ,_1: 0
                                                        ,_2: 2}
                                                   ,_1: false}
                                                  ,{ctor: "_Tuple2"
                                                   ,_0: {ctor: "_Tuple3"
                                                        ,_0: 2
                                                        ,_1: 0
                                                        ,_2: 0}
                                                   ,_1: false}
                                                  ,{ctor: "_Tuple2"
                                                   ,_0: {ctor: "_Tuple3"
                                                        ,_0: 2
                                                        ,_1: 1
                                                        ,_2: 0}
                                                   ,_1: false}
                                                  ,{ctor: "_Tuple2"
                                                   ,_0: {ctor: "_Tuple3"
                                                        ,_0: 2
                                                        ,_1: 2
                                                        ,_2: 0}
                                                   ,_1: false}
                                                  ,{ctor: "_Tuple2"
                                                   ,_0: {ctor: "_Tuple3"
                                                        ,_0: 2
                                                        ,_1: 2
                                                        ,_2: 1}
                                                   ,_1: false}
                                                  ,{ctor: "_Tuple2"
                                                   ,_0: {ctor: "_Tuple3"
                                                        ,_0: 2
                                                        ,_1: 2
                                                        ,_2: 2}
                                                   ,_1: true}
                                                  ,{ctor: "_Tuple2"
                                                   ,_0: {ctor: "_Tuple3"
                                                        ,_0: 2
                                                        ,_1: 1
                                                        ,_2: 2}
                                                   ,_1: false}
                                                  ,{ctor: "_Tuple2"
                                                   ,_0: {ctor: "_Tuple3"
                                                        ,_0: 2
                                                        ,_1: 1
                                                        ,_2: 1}
                                                   ,_1: true}
                                                  ,{ctor: "_Tuple2"
                                                   ,_0: {ctor: "_Tuple3"
                                                        ,_0: 2
                                                        ,_1: 1
                                                        ,_2: 2}
                                                   ,_1: false}]));
   var zCount = 5;
   var yCount = 5;
   var xCount = 5;
   var cellz = 1;
   var boardz = cellz * zCount;
   var celly = 1;
   var boardy = celly * yCount;
   var cellx = 1;
   var boardx = cellx * xCount;
   var uncurry3 = F2(function (f,
   _v18) {
      return function () {
         switch (_v18.ctor)
         {case "_Tuple3": return A3(f,
              _v18._0,
              _v18._1,
              _v18._2);}
         _U.badCase($moduleName,
         "on line 98, column 3 to 10");
      }();
   });
   var stepCell = F4(function (board,
   cell,
   state,
   board$) {
      return function () {
         var n = A2(uncurry3,
         countNeighbors(board),
         cell);
         return A3($Dict.insert,
         cell,
         A2(newState,state,n),
         board$);
      }();
   });
   var stepSim = function (board) {
      return A3($Dict.foldr,
      stepCell(board),
      $Dict.empty,
      board);
   };
   var stepBoard = F2(function (a,
   board) {
      return function () {
         switch (a.ctor)
         {case "Flip": switch (a._0.ctor)
              {case "_Tuple2":
                 return A2(flipCell,
                   {ctor: "_Tuple3"
                   ,_0: a._0._0
                   ,_1: a._0._1
                   ,_2: 0},
                   board);}
              break;
            case "Step":
            return stepSim(board);}
         _U.badCase($moduleName,
         "between lines 175 and 178");
      }();
   });
   var repeated = F2(function (n,
   x) {
      return _U.eq(n,
      0) ? _L.fromArray([]) : A2($List._op["::"],
      x,
      A2(repeated,n - 1,x));
   });
   var zip = F2(function (xs,ys) {
      return function () {
         var _v27 = {ctor: "_Tuple2"
                    ,_0: xs
                    ,_1: ys};
         switch (_v27.ctor)
         {case "_Tuple2":
            switch (_v27._1.ctor)
              {case "[]":
                 return _L.fromArray([]);}
              switch (_v27._0.ctor)
              {case "::":
                 switch (_v27._1.ctor)
                   {case "::":
                      return A2($List._op["::"],
                        {ctor: "_Tuple2"
                        ,_0: _v27._0._0
                        ,_1: _v27._1._0},
                        A2(zip,_v27._0._1,_v27._1._1));}
                   break;
                 case "[]":
                 return _L.fromArray([]);}
              break;}
         _U.badCase($moduleName,
         "between lines 64 and 67");
      }();
   });
   var zipWith = F3(function (f,
   xs,
   bs) {
      return function () {
         var _v34 = {ctor: "_Tuple2"
                    ,_0: xs
                    ,_1: bs};
         switch (_v34.ctor)
         {case "_Tuple2":
            switch (_v34._1.ctor)
              {case "[]":
                 return _L.fromArray([]);}
              switch (_v34._0.ctor)
              {case "::":
                 switch (_v34._1.ctor)
                   {case "::":
                      return A2($List._op["::"],
                        A2(f,_v34._0._0,_v34._1._0),
                        A3(zipWith,
                        f,
                        _v34._0._1,
                        _v34._1._1));}
                   break;
                 case "[]":
                 return _L.fromArray([]);}
              break;}
         _U.badCase($moduleName,
         "between lines 58 and 61");
      }();
   });
   var xyCoords = function (rs) {
      return function () {
         var rsWithX = A2($List.map,
         function (r) {
            return A2(zip,
            _L.range(0,$List.length(r) - 1),
            r);
         },
         rs);
         return A3(zipWith,
         F2(function (r,y) {
            return A2(zipWith,
            F2(function (_v41,y) {
               return function () {
                  switch (_v41.ctor)
                  {case "_Tuple2":
                     return {ctor: "_Tuple2"
                            ,_0: {ctor: "_Tuple2"
                                 ,_0: _v41._0
                                 ,_1: y}
                            ,_1: _v41._1};}
                  _U.badCase($moduleName,
                  "on line 77, column 60 to 69");
               }();
            }),
            r)(A2(repeated,
            $List.length(r),
            y));
         }),
         rsWithX,
         _L.range(0,
         $List.length(rsWithX)));
      }();
   };
   var angle = A3($Signal.foldp,
   F2(function (dt,theta) {
      return theta + dt / 15000;
   }),
   0,
   $Time.fps(25));
   var paused = A3($Signal.foldp,
   F2(function (_v45,isPaused) {
      return function () {
         return $Basics.not(isPaused);
      }();
   }),
   false,
   A3($Signal.keepIf,
   function (t) {
      return t;
   },
   false,
   $Keyboard.space));
   var speed = $Time.every(0.3 * $Time.second);
   var Step = {ctor: "Step"};
   var steps = A2($Signal.dropWhen,
   paused,
   Step)($Signal.sampleOn(speed)($Signal.constant(Step)));
   var Flip = function (a) {
      return {ctor: "Flip",_0: a};
   };
   var flips = $Signal.dropRepeats(A2($Signal._op["<~"],
   function (_v47) {
      return function () {
         switch (_v47.ctor)
         {case "_Tuple2":
            return Flip({ctor: "_Tuple2"
                        ,_0: (_v47._0 - 375) / 100 | 0
                        ,_1: (_v47._1 - 375) / 100 | 0});}
         _U.badCase($moduleName,
         "between lines 40 and 41");
      }();
   },
   A2($Signal.keepIf,
   function (_v51) {
      return function () {
         switch (_v51.ctor)
         {case "_Tuple2":
            return _U.cmp(_v51._0 - 375,
              375) < 1 && (_U.cmp(_v51._1 - 375,
              375) < 1 && (_U.cmp(_v51._0 - 375,
              -375) > -1 && _U.cmp(_v51._1 - 375,
              -375) > -1));}
         _U.badCase($moduleName,
         "between lines 42 and 44");
      }();
   },
   {ctor: "_Tuple2"
   ,_0: -1
   ,_1: -1})(A3($Signal.keepWhen,
   $Mouse.isDown,
   {ctor: "_Tuple2",_0: -1,_1: -1},
   $Mouse.position))));
   var actions = A2($Signal.merge,
   steps,
   flips);
   var boardState = A3($Signal.foldp,
   stepBoard,
   defaultBoard,
   actions);
   var gol = $Signal.map($Engine.render)(A2($Signal.map,
   displayBoard,
   boardState));
   var main = gol;
   _elm.Gol.values = {_op: _op
                     ,Flip: Flip
                     ,Step: Step
                     ,speed: speed
                     ,paused: paused
                     ,steps: steps
                     ,flips: flips
                     ,actions: actions
                     ,angle: angle
                     ,zipWith: zipWith
                     ,zip: zip
                     ,repeated: repeated
                     ,xyCoords: xyCoords
                     ,uncurry3: uncurry3
                     ,cellx: cellx
                     ,celly: celly
                     ,cellz: cellz
                     ,xCount: xCount
                     ,yCount: yCount
                     ,zCount: zCount
                     ,boardx: boardx
                     ,boardy: boardy
                     ,boardz: boardz
                     ,defaultBoard: defaultBoard
                     ,neighborDiffs: neighborDiffs
                     ,newState: newState
                     ,findWithDefault: findWithDefault
                     ,countNeighbors: countNeighbors
                     ,flipCell: flipCell
                     ,stepCell: stepCell
                     ,stepSim: stepSim
                     ,stepBoard: stepBoard
                     ,Input: Input
                     ,mat: mat
                     ,myCube: myCube
                     ,vp: vp
                     ,cam: cam
                     ,listCubes: listCubes
                     ,myScene: myScene
                     ,filters: filters
                     ,boardToList: boardToList
                     ,displayBoard: displayBoard
                     ,title: title
                     ,boardState: boardState
                     ,gol: gol
                     ,main: main
                     ,perspective: perspective
                     ,perspectiveMatrix: perspectiveMatrix
                     ,cam2: cam2
                     ,vertexShader: vertexShader
                     ,fragmentShader: fragmentShader};
   return _elm.Gol.values;
};